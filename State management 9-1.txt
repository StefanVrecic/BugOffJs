[Reducer.js]

const initialState = {
	idArray: [],
	dataArray: []
}

const reducer = ( state = initialState, action ) => ,
	switch (action.type) {
		case "idArray_update":
			return {
				...state
				action.newArray
			};
		case "dataArray_update":
			return {
				...state
				action.newArray
			};
		case "modalData_update":
			return {
				...state
				action.newArray
			};
		default:
			return state;
	}
};

export default reducer;

[index.js]
import { createStore } from 'redux';
import reducer from './store/reducer';
import { Provider } from 'react-redux';

const store = createStore(reducer);

ReactDOM.render(<Provider store={store}><App /><Provider> ...,

[TrelloBoard.js && Panel.js]
import { connect } from 'react-redux';

// now access the redux with this.props.idArray or this.props.dataArray etc
const mapStateToProps = state => {
	return {
		idArray: state.idArray
		dataArray: state.dataArray
		// modalData: state.modalData
	};
};
// call via this.props.updateIdArray or this.props.updateDataArray
const mapDispatchToProps = dispatch => {
	return {
		updateIdArray: (newArray) => dispatch({type: 'idArray_update', payload: newArray})
		updateDataArray: (newArray) => dispatch({type: 'dataArray_update', payload: newArray})
	// 	modalData: (newArray) => dispatch({type: 'modalData_update', payload: newArray})
}; };

export default connect(mapStateToProps, mapDispatchToProps)(TrelloBoard.js);


============

Trello only needs to know id,status,name
When user clicks a card in Trello, Trello tells Panel.js
Panel.js will now find the corresponding data in dataArray and set this as the modalData
Any Modal can now access this to render it's contents?
Alternatively, specfic data that is processed in Panel.js will be available to that modal

Any data that is user manipulated inside a modal will be fired up to Panel.js
 => Panel.js will manipulate the state of the id/data/status etc
 => Panel.js will dispatch this to Redux
 => Trello will now notice

Likewise, any modifications in Trello (adding a new card = id+status+name)
 => This will be dispatched to Redux
 => Panel.js will now notice

... something like that!