mapStateToProps // subscribes - gets state
mapDispatchToProps // dispatches - sends state to store
export default connect



BurgerBuilder.js [component]
 => dispatch(actions.addIngredient(ingname)

Index.js (export addIngredient from [store/actions/burgerBuilder.js]
 => 

BurgerBuilder.js [store/actions/burgerBuilder.js]
 => return actionTypes.ADD_INGREDIENT + (payload - ingedientName: ingname)

 => [store/actions/actionTypes.js]
"ADD_INGREDIENT"

BurgerBuilder.js [stores/reducers/burgerbuilder.js]
 => goes through the reducer 
	switch("ADD_INGREDIENT") {
	case: "ADD_INGREDIENT": return addIngredient(state, action)
}
 => addIngredient(state, action) ... return updateObject(state, updatedState)

 => Utility.js [shared/utility.js]
export const updateObject = (addIngredient, updatedProperties}) )
	return ({...oldObject, ...updatedProperties})

 => BurgerBuilder.js [component]
Gets the new state from the store, which is initialised and updated in the reducer: [reducers/burgerBuilder.js]
initialState = {
ingredients: null
totalPrice: 4
error: false
}

and in the component we subscribe to:
	mapStateToProps = state => {
	ing: state.burgerBuilder.ingredients
	price: state.burgerBuilder.totalPrice
	error: state.burgerBuilder.error
}

and the middle between state. and .error = .burgerBuilder.
 => this is imported into the root index.js where the app starts
import burgerBuilderReducer from 'reducers/burgerBuilder.js'

and this is initialised to create a store

const rootReducer = combineReducer({
	...
	burgerBuilder: burgerBuilderReducer
	...
}

const store = createStore(rootReducer, composeEnhancers)
	applyMiddleware(thunk)
});




