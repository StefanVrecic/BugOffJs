6:29 PM 31/12/2019
Starting with project set-up and Kanban board with drag and drop UI

8:58 PM 31/12/2019
Built a basic trello board

9:26 PM 31/12/2019
Adding event listener to drag and drop, get dynamically rendered elements responding

11:43 PM 31/12/2019
Previously statically rendered cards delete on click. Want to implement drag n drop. Doesn't delete correct card that has been dynamically rendered.
 => deleteCardIndex incorrect for added cards (12:10 AM 1/01/2020)

12:35 AM 1/01/2020
 => now I had two divs where I only wanted one. I should've looked at the developer tool first. Waste of an hour. This should've been so obvious by the output I was getting...
 => did something like this now:
const htmlText = `test-test-${num++}`
    const element = document.createElement("div");
    element.classList.add("droppable");
    element.classList.add("box-contents--card");
    // box-contents--card droppable
    element.innerText = htmlText; 

12:51 AM 1/01/2020
Added spacing at top before cards start. Could make sure that the space between cards is not clickable.

1:02 AM 1/01/2020
Clicking title no longer adds card

2:35 AM 1/01/2020
Added drag and drop - however cards only drop to the bottom of the list, cannot insert between other cards or re-order

4:27 AM 1/01/2020
Built crappy landing page, copied logo and some html/css 
 => going to link sign up with backend
 => need JS for login instead of just signup

5:06 AM 1/01/2020
Slowly setting up the backbone of the back-end. Next task is to set up some routes with postman.

7:49 AM 1/01/2020
Set up standalone database to setup routes etc before integrating with front-end. Tired af.

8:03 AM 1/01/2020
Set up logging in on the backend. Need to disallow multiple logins from the same client.

6:58 PM 1/01/2020
Woke up, starting work

7:39 PM 1/01/2020
Establised basic create and update bug routes, can now work on linking up front-end with back-end. Going to write a few tests then / after. Routes still need a lot of work afterwards. Task - on the front end, click a button, hardcode a bug to submit, add to database and display.

10:35 PM 1/01/2020
Bleh. Realised I've already used what I need to use to link it up. Using axios / fetch. Managed to set up a basic request that could easily be tied into front-end, that generates a response from my routers. PITA, going to set up some axios requests in my front-end to tie into the backend..

11:50 PM 1/01/2020
Tried to tie up front and back as I did in the other project, but using JS requests instead of form POST. Unfortunately, I forgot that axios lives in node.js and not in the browser, so I'm not able to tie in Axios as I thought I could.

12:23 AM 2/01/2020
Yessssssssssssssssssssssssss! Used fetch and tied in the back-end to create a user when I click on a div on the front end! 
Might move my app to React. I need to do a lot of re-factoring. Gonna try make cards based on names in db.

1:10 AM 2/01/2020
Trying to push my code to Git but I'm clueless something is wrong. I did some work in another folder, think I deleted the previous git folder, created a new one and I'm so confused:
git push -u origin master:
fatal: 'origin' does not appear to be a git repository
fatal: Could not read from remote repository.

1:37 AM 2/01/2020
Updates rejected because they contain work that I do not have locally. Screw it, deleted repo and made a new one.

2:29 AM 2/01/2020
Set up react project, have components <Card> and <TrelloBoard> ... converting logic from initial js build to React

3:28 AM 2/01/2020
Setting up the React components, no interactivity so far. Trying to integrate the front and backend. Guess I should have a seperate terminal for the server and the React?

5:48 AM 2/01/2020
No idea why I was trying to import my backend into my frontend rofl, but I am now trying to send requests via Axios, getting CORS errors. React is on port 3000 and express is on 8080

6:02 AM 2/01/2020
Figured out how to allow CORS -- would need to set up a whitelist later on.
Need to work on the front end a little now - getting the drag and drop working as it was earlier, a few 'add card' widgets or something, and tracking the location of the cards. Then integrate this with the database and add authentication. That way the next time the user logs in, the state persists. Feeling quite tired, so gonna leave these posts for later when I'm feeling fresh to expand my knowledge:

7:36 PM 2/01/2020
Create an "Add a card" design like this: https://images.thoughtbot.com/how-we-trello/trello.png
Design a modal like this - for when submitting a new card or viewing one already placed:
https://trello.com/c/72Ow76vy/3-sketch-site-banner
Off to gym.

10:27 PM 2/01/2020
Got basic modal designed, needs styling. Will put in some lorem ipsum filler. Still need to do the "Add a card" section.

12:00 AM 3/01/2020
Still developing modal, set up a space for title, status, a tab of options and below will go a description. The modal opens when a card is clicked and closes when the backdrop is clicked. Need to work on making the modal display the information from the card. Going to add State to the card. 

12:30 AM 3/01/2020
Modal displays card's name when card is clicked. Now for status.

1:03 AM 3/01/2020
Can't figure out how to loop through an array and put those elements together and then render them... Also now my app is complaining about express wtf?

1:08 AM 3/01/2020
That's right you use an array. 30 minutes wasted...

1:30 AM 3/01/2020
Modal now displays status of card. To implement: drag and drop and the control panel tab in the modal
https://trello.com/c/72Ow76vy/3-sketch-site-banner

3:38 AM 3/01/2020
Almost got the drag and drop going. Not sure if I should make Lane.js a functional or stateful component.

4:45 AM 3/01/2020
Almost got the transfer going... Just realised that I was meant to use an arrow function... Was referring to the wrong 'this'... 30 minutes wasted!

5:09 AM 3/01/2020
Cards dragging and dropping but behaviour is kaput

5:16 AM 3/01/2020
Uh just had a thought -- I am keeping track of the card's position both in the card and the trelloboard.

6:00 AM 3/01/2020
Current solution is not going to work. Once I have 2 or more cards in a column, if I take away one of the first ones, then the ones below it will not know how to update their position and therefore when they are dragged they will not be able give the right drag data. I am going to re-create the lanes based on the card array..

7:38 AM 3/01/2020
5 hours coding later and I can't figure this out. I'll have to re-think this tomorrow. I might focus on getting the sign up process set up instead to clear my head of this drag and drop.

11:38 PM 3/01/2020
Woke up at 8:30pm started around 9.30. 
Spent 2 hours revising Redux and going over the data flow of the cards to sort out the dragging and dropping.

3:24 AM 4/01/2020
Really made at myself, should've finished this 90 minutes ago - turns out I had was referencing the wrong thing in the [card.js] doing this.state.uniqueid instead of this.props.uniqueid. No idea what was going on cause I was sure it should've worked that way too, and it would've been a low effort thing to test out so I should've done that first... Don't know what the cards were setting the incorrect state
3:34 AM 4/01/2020
Working...

6:18 AM 4/01/2020
Working on the routes. Focused on making the "GET bugs" work by user _id"

7:13 AM 4/01/2020
Got all the routes in [bug.js] working. Two next steps - could be done in either order
a) get the user logging in and authenticated - (a2) could tie in the login screen -- needs developing
b) give the client authentication priveleges and work on integrating updates in the UI with updates in the db

7:43 AM 4/01/2020
Got login working via requests :) using hard-coded user and pass values at the moment. Also got the cards/bugs loading from the database.
Need to parse the data and render it to the client. Also need to make sure sensitive information is not passed back in the response -- I'll do later.

8:34 AM 4/01/2020
Managing to get cards load and display on the UI from database! 
Each card has additional information - I tried to set these are properties so I have an array like so:
array = [ [id1, {data}], [id2, {data}], [id3, {data}] ] so then when I access the data I can just do array[idIndex][1].property

Alternative:
array = [ [id1, [data] ] , [id2, [data] ], [id3, [data] ] ]  => this is a 3D array
But then if I want to get any data if i to go array[idIndex][1][indexOfPropery]
 => which is possible. But then I need to track the indexes of all the properties, and I need to check whether or not that card contains that property or not...

So thus:
array = [ [id1, [[key,value] ,[key,value]] , [id2, [ [dataKey, dataValue] ] ] , [id3, [ [dataKey, dataValue] ] ] ]
	==========================================================================================================
	  ================================   ================================   ================================
		========================	   ========================	      ========================
		  ====================   	     ====================		====================

This is now a 4d array. This may be easier to manage...?
I wanted to use an object, but React doesn't allow objects in the state. I'm curious if there is a better way to store this data...
		

Not sure how I'm going to do this. I could always stringify it and store it and then convert it back into an object as needed? Mhm...

Thinking of going with the 3D structure, but trim the id out?

		 0		    1 			2
	      0      1		 0      1	    0      1
array = [ [0[sts], [dsc] ] , [0[sts], [dsc] ] , [0[sts], [dsc] ]  ]
	   1 val    val	      1	val    val	 1 val	  val

id = the card id; let's say it's 2
idIndex = getIdIndex(id)

lets say we want to change the description:
we have an array [status, description, title, members] etc. Hardcode this in.
const i = getPropertyIndex(description)  => 1
 => i = 1

array[idIndex][keyProperty] = "new description"
array[id][i] = "new"
array[1][2] = "new" ?

If a certain property doesn't exist, we will create it anyway, but put it's value as undefined?

1:42 PM 4/01/2020
Cards position is saved (in db) properly now

12:20 AM 5/01/2020
Almost spent an hour trying to figure out how to remove white spots from an image. Built an okay landing page with bootstrap template I copied. Responsiveness is okay but still requires extensive testing. Need to sort out the fonts and all the extraneous file, project is too large just from the import.

2:30 AM 5/01/2020
Setting up React routing. Thinking if I have landing page > authentication component + context > redirect to user panel / TrelloBoard

2:56 AM 5/01/2020
Set this up. Not UX friendly so will need to integrate it into the landing page sign up for better UX, latter on. But good for splitting up logic at the moment. Now working on getting a authentication context going on in the React app. Need to connect form login to log me in, instead of hardcoding. Also, need to set up logic if user isn't registered etc.

4:41 AM 5/01/2020
Did some reading about hashing and salting

5:30 AM 5/01/2020
Got email and pass forwarding onto auth component then checking against the database, unfortunately the fail response doesn't work -- turns out that I am not getting a response for incorrect passwords.

5:46 AM 5/01/2020
Fixed, tried to access an undefined property in the catch block of the login
Future, also need to seperate sign up from login
- Need a redirect 404

- Need to add an authContext
- could add an interceptor that will log a user out if any authentication to the backend fails? e.g., set the authContext to false

6:49 AM 5/01/2020
Just doing some thinkng and revising previously learnt ideas. Lots of little things that need work. At the moment:

9:06 AM 5/01/2020
Got a basic UI working that submits text for new card. Just need to link it up to render the card + id + store in db.
Think I need to spend a 30-60 minutes reading through BootStrap or Skeleton and starting using those things. I am spending way too much time on some simple things like getting a button styed. CSS is the bane of existence.

11:23 AM 5/01/2020
Took break. Can now add cards in UI. Next feature - persisting. And deleting.

12:00 PM 5/01/2020
Almost got it working! I just need to make the db_createCard call after the state actually updates, but I can't seem to get the setState callback working... 

10:53 PM 5/01/2020
Starting later than expected today. Just need the callback working.

12:59 AM 6/01/2020
Got it working, then wasted an hour trying to figure out why the Authorization wasn't working properly... Just created an instance and it seemed to work. wtf.....

1:18 AM 6/01/2020
Created admin 
admin@admin.com - admin123
Using the program to manage the program

1:52 AM 6/01/2020
Wrote a little export function to track the log

6:32 AM 6/01/2020
Can logout, can delete cards, added bootstrap.css


---

Learn everything you can about http and web interactions. Sessions, cookies, tokens, oauth, etags, the different types of http verbs, basic auth, file streams, learn about bash, and scp, and git, learn all your base commands, tail, top, du, cat, gunzip. The list goes on.

TO DO:

set ability to create a card ... + delete => almost done. Need to make the box only appear when button hovered.


authContext, 
split signup/auth components, 
make a better loading UI, 
confirm password on the signup page, 
info on the landing page,  
get the cards loading automatically from when user logged in (this will work via the authContext),
add an axios instance for attaching auth headers (optional)
add an axios instance to log user out if auth token fails (optional)
implement guards
collapse bugs when user deleted? not sure if already imeplemented

LATER ON: 
-sidebar for the panel, 
a list view mode for the panel,

IDEAS:
limit size of lane to how many cards are there
re-order lanes


https://www.owasp.org/index.php/Top_10_2010-A9-Insufficient_Transport_Layer_Protection


/users/stefan/mongodb/bin/mongod.exe --dbpath=/users/stefan/mongodb-data
/users/stefan/mongodb/bin/mongod.exe --dbpath=/users/stefan/mongodb-data
/users/stefan/mongodb/bin/mongod.exe --dbpath=/users/stefan/mongodb-data









stefan = 5e1010ec9a353812f0e6b025


Read this:
https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape/#designing-a-normalized-state
See if should implement
And 
https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-array-index-key.md

Read this:
https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape/#designing-a-normalized-state
See if should implement
And 
https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-array-index-key.md












https://flaviocopes.com/how-to-serve-react-from-same-origin/
https://daveceddia.com/create-react-app-express-backend/
https://stackoverflow.com/questions/51367424/how-to-set-react-app-and-api-on-same-port
https://stackoverflow.com/questions/48304513/backend-and-frontend-on-same-port
https://stackoverflow.com/questions/37694551/do-client-and-server-need-to-use-same-port-to-connect
https://stackoverflow.com/questions/50591374/mern-stack-express-and-react-on-same-port
Questions to consider - what's the best way for React and Express to communicate
https://www.udemy.com/course/the-complete-nodejs-developer-course-2/learn/lecture/13728930#questions/7784794
https://www.udemy.com/course/the-complete-nodejs-developer-course-2/learn/lecture/13728930#questions/7784794
https://www.udemy.com/course/the-complete-nodejs-developer-course-2/learn/lecture/13728930#questions/7784794
/users/stefan/mongodb/bin/mongod.exe --dbpath=/users/stefan/mongodb-data
/users/stefan/mongodb/bin/mongod.exe --dbpath=/users/stefan/mongodb-data
/users/stefan/mongodb/bin/mongod.exe --dbpath=/users/stefan/mongodb-data
/users/stefan/mongodb/bin/mongod.exe --dbpath=/users/stefan/mongodb-data
C:\Users\Stefan\Desktop\reactApp\burger-builder-starting-setup
C:\Users\Stefan\Desktop\reactApp\burger-builder-starting-setup
C:\Users\Stefan\Desktop\reactApp\burger-builder-starting-setup
C:\Users\Stefan\Desktop\reactApp\burger-builder-starting-setup


Yo lets say I have a component that wants to store something in a database. Let's say a form with user data. And you wanna make a method like db_saveUser() with is just an HTTP post with payload. How do you structure your app to make the code tidy? Would you put a seperate folder and file with all the database methods, or do you define the methods directly in the component?
